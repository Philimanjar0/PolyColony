local AbstractAcceptor = {}

setmetatable(AbstractAcceptor, {
    __call = function(_,solution, numberOfNodes)
        local self = {}

        self.solution = solution

        self.numberOfNodes = numberOfNodes

        self.solvedVertices = 0

        function self.setSolution(newSolution, solvedVertices)
            self.solution = newSolution
            self.solvedVertices = solvedVertices
        end

        function self.getSolution()
            return self.solution
        end

        self.accept = function(assignment) return true end

        function self.assignSolution(solutionNode, color, neighbors, availableColors)
            self.solution[solutionNode].assignment = color
            self.solvedVertices = self.solvedVertices + 1
        end

        function self.removeSolution(solutionNode, color, neighbors, availableColors)
            self.solution[solutionNode].assignment = -1
            -- Will use this for replacing neighbors with constraints
            -- for node in pairs(neighbors) do
            --     self.solution[node].available[color] = color
            -- end
        end

        function self.areAllSolved()
            return self.solvedVertices == self.numberOfNodes
        end

        return self
    end
})

return AbstractAcceptor
